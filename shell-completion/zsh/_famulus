#compdef famulus

__famulus()
{
    FAMULUS_LOG=ERROR famulus "$@"
}

_famulus_list_all_tests()
{
    _famulus_all_tests=( $(__famulus list tests | { while read a; do echo -E - " $a"; done; }) )
}

_famulus_list_all_suites()
{
    _famulus_all_suites=( $(__famulus list suites | { while read a; do echo -E - " $a"; done; }) )
}

(( $+functions[_famulus_list] )) || _famulus_list()
{
    _arguments -w -S -s \
        '(-d --details)'{-d,--details}'[display details about each object]' \
        '1:what:(suites tests)'
}

(( $+functions[_famulus_new] )) || _famulus_new()
{
    _arguments -w -S -s \
        '(-f --from)'{-f,--from}'[name of the test/suite to copy]: :->object' \
        '(-O --output)'{-O,--output}'[set output directory]:directory:_directories' \
        '1:what:(suite test)' \
        '2: :_guard "^-*" name'

    if [[ "$state" == object ]]; then
        _famulus_list_all_tests
        _famulus_list_all_suites
        compadd -a _famulus_all_tests _famulus_all_suites
    fi
}

(( $+functions[_famulus_show] )) || _famulus_show()
{
    _arguments -w -S -s \
               '1:what:(suite test)' \
               '2: :->name'

    if [[ "$state" == name ]]; then
        local names
        case "$words[2]" in
            suite)
                _famulus_list_all_suites
                names=_famulus_all_suites
                ;;
            test)
                _famulus_list_all_tests
                names=_famulus_all_tests
                ;;
            *)
                _message "invalid object: $words[2]"
                ;;
        esac
        compadd -a ${names}
    fi
}

(( $+functions[_famulus_edit] )) || _famulus_edit()
{
    _arguments -w -S -s \
               '1:what:(suite test)' \
               '2: :->name'

    if [[ "$state" == name ]]; then
        local names
        case "$words[2]" in
            suite)
                _famulus_list_all_suites
                names=_famulus_all_suites
                ;;
            test)
                _famulus_list_all_tests
                names=_famulus_all_tests
                ;;
            *)
                _message "invalid object: $words[2]"
                ;;
        esac
        compadd -a ${names}
    fi
}

(( $+functions[_famulus_command] )) || _famulus_command()
{
    local -a _famulus_cmds
    _famulus_cmds=(
        "edit:edit a test or test suite"
        "list:list available tests or test suites"
        "new:create a new test or test suite"
        "show:show information about a test or test suite"
    )
    if (( CURRENT == 1 )); then
        _describe -t commands 'famulus command' _famulus_cmds || compadd "$@"
    else
        local curcontext="$curcontext"

        cmd="${${_famulus_cmds[(r)$words[1]:*]%%:*}}"

    if (( $#cmd )); then
            curcontext="${curcontext%:*:*}:famulus-${cmd}:"

            _call_function ret _famulus_$cmd || _message 'no more arguments'
        else
            _message "unknown famulus command: $words[1]"
        fi
        return ret
    fi
}

_arguments -w -S -s \
    '(-V --version)'{-v,--version}'' \
    '(-D --debug)'{-d,--debug}'' \
    '*::famulus command:_famulus_command'

# vim: ts=4 sts=4 sw=4 et ai
# Local Variables:
# mode: sh
# End:
